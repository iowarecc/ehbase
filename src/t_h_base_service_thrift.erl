%%
%% Autogenerated by Thrift Compiler (0.12.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(t_h_base_service_thrift).
-behaviour(thrift_service).


-include("../include/t_h_base_service_thrift.hrl").

-export([struct_info/1, function_info/2, function_names/0]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% exists(This, Table, Tget)
function_info('exists', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase_types', 'TGet'}}}]}
;
function_info('exists', reply_type) ->
  bool;
function_info('exists', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% existsAll(This, Table, Tgets)
function_info('existsAll', params_type) ->
  {struct, [{1, string},
          {2, {list, {struct, {'hbase_types', 'TGet'}}}}]}
;
function_info('existsAll', reply_type) ->
  {list, bool};
function_info('existsAll', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% get(This, Table, Tget)
function_info('get', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase_types', 'TGet'}}}]}
;
function_info('get', reply_type) ->
  {struct, {'hbase_types', 'TResult'}};
function_info('get', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getMultiple(This, Table, Tgets)
function_info('getMultiple', params_type) ->
  {struct, [{1, string},
          {2, {list, {struct, {'hbase_types', 'TGet'}}}}]}
;
function_info('getMultiple', reply_type) ->
  {list, {struct, {'hbase_types', 'TResult'}}};
function_info('getMultiple', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% put(This, Table, Tput)
function_info('put', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase_types', 'TPut'}}}]}
;
function_info('put', reply_type) ->
  {struct, []};
function_info('put', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% checkAndPut(This, Table, Row, Family, Qualifier, Value, Tput)
function_info('checkAndPut', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {5, string},
          {6, {struct, {'hbase_types', 'TPut'}}}]}
;
function_info('checkAndPut', reply_type) ->
  bool;
function_info('checkAndPut', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% putMultiple(This, Table, Tputs)
function_info('putMultiple', params_type) ->
  {struct, [{1, string},
          {2, {list, {struct, {'hbase_types', 'TPut'}}}}]}
;
function_info('putMultiple', reply_type) ->
  {struct, []};
function_info('putMultiple', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% deleteSingle(This, Table, Tdelete)
function_info('deleteSingle', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase_types', 'TDelete'}}}]}
;
function_info('deleteSingle', reply_type) ->
  {struct, []};
function_info('deleteSingle', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% deleteMultiple(This, Table, Tdeletes)
function_info('deleteMultiple', params_type) ->
  {struct, [{1, string},
          {2, {list, {struct, {'hbase_types', 'TDelete'}}}}]}
;
function_info('deleteMultiple', reply_type) ->
  {list, {struct, {'hbase_types', 'TDelete'}}};
function_info('deleteMultiple', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% checkAndDelete(This, Table, Row, Family, Qualifier, Value, Tdelete)
function_info('checkAndDelete', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {5, string},
          {6, {struct, {'hbase_types', 'TDelete'}}}]}
;
function_info('checkAndDelete', reply_type) ->
  bool;
function_info('checkAndDelete', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% increment(This, Table, Tincrement)
function_info('increment', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase_types', 'TIncrement'}}}]}
;
function_info('increment', reply_type) ->
  {struct, {'hbase_types', 'TResult'}};
function_info('increment', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% append(This, Table, Tappend)
function_info('append', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase_types', 'TAppend'}}}]}
;
function_info('append', reply_type) ->
  {struct, {'hbase_types', 'TResult'}};
function_info('append', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% openScanner(This, Table, Tscan)
function_info('openScanner', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase_types', 'TScan'}}}]}
;
function_info('openScanner', reply_type) ->
  i32;
function_info('openScanner', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getScannerRows(This, ScannerId, NumRows)
function_info('getScannerRows', params_type) ->
  {struct, [{1, i32},
          {2, i32}]}
;
function_info('getScannerRows', reply_type) ->
  {list, {struct, {'hbase_types', 'TResult'}}};
function_info('getScannerRows', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}},
          {2, {struct, {'hbase_types', 'TIllegalArgument'}}}]}
;
% closeScanner(This, ScannerId)
function_info('closeScanner', params_type) ->
  {struct, [{1, i32}]}
;
function_info('closeScanner', reply_type) ->
  {struct, []};
function_info('closeScanner', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}},
          {2, {struct, {'hbase_types', 'TIllegalArgument'}}}]}
;
% mutateRow(This, Table, TrowMutations)
function_info('mutateRow', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase_types', 'TRowMutations'}}}]}
;
function_info('mutateRow', reply_type) ->
  {struct, []};
function_info('mutateRow', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getScannerResults(This, Table, Tscan, NumRows)
function_info('getScannerResults', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase_types', 'TScan'}}},
          {3, i32}]}
;
function_info('getScannerResults', reply_type) ->
  {list, {struct, {'hbase_types', 'TResult'}}};
function_info('getScannerResults', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getRegionLocation(This, Table, Row, Reload)
function_info('getRegionLocation', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, bool}]}
;
function_info('getRegionLocation', reply_type) ->
  {struct, {'hbase_types', 'THRegionLocation'}};
function_info('getRegionLocation', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getAllRegionLocations(This, Table)
function_info('getAllRegionLocations', params_type) ->
  {struct, [{1, string}]}
;
function_info('getAllRegionLocations', reply_type) ->
  {list, {struct, {'hbase_types', 'THRegionLocation'}}};
function_info('getAllRegionLocations', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% checkAndMutate(This, Table, Row, Family, Qualifier, CompareOp, Value, RowMutations)
function_info('checkAndMutate', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {5, i32},
          {6, string},
          {7, {struct, {'hbase_types', 'TRowMutations'}}}]}
;
function_info('checkAndMutate', reply_type) ->
  bool;
function_info('checkAndMutate', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getTableDescriptor(This, Table)
function_info('getTableDescriptor', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}}]}
;
function_info('getTableDescriptor', reply_type) ->
  {struct, {'hbase_types', 'TTableDescriptor'}};
function_info('getTableDescriptor', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getTableDescriptors(This, Tables)
function_info('getTableDescriptors', params_type) ->
  {struct, [{1, {list, {struct, {'hbase_types', 'TTableName'}}}}]}
;
function_info('getTableDescriptors', reply_type) ->
  {list, {struct, {'hbase_types', 'TTableDescriptor'}}};
function_info('getTableDescriptors', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% tableExists(This, TableName)
function_info('tableExists', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}}]}
;
function_info('tableExists', reply_type) ->
  bool;
function_info('tableExists', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getTableDescriptorsByPattern(This, Regex, IncludeSysTables)
function_info('getTableDescriptorsByPattern', params_type) ->
  {struct, [{1, string},
          {2, bool}]}
;
function_info('getTableDescriptorsByPattern', reply_type) ->
  {list, {struct, {'hbase_types', 'TTableDescriptor'}}};
function_info('getTableDescriptorsByPattern', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getTableDescriptorsByNamespace(This, Name)
function_info('getTableDescriptorsByNamespace', params_type) ->
  {struct, [{1, string}]}
;
function_info('getTableDescriptorsByNamespace', reply_type) ->
  {list, {struct, {'hbase_types', 'TTableDescriptor'}}};
function_info('getTableDescriptorsByNamespace', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getTableNamesByPattern(This, Regex, IncludeSysTables)
function_info('getTableNamesByPattern', params_type) ->
  {struct, [{1, string},
          {2, bool}]}
;
function_info('getTableNamesByPattern', reply_type) ->
  {list, {struct, {'hbase_types', 'TTableName'}}};
function_info('getTableNamesByPattern', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getTableNamesByNamespace(This, Name)
function_info('getTableNamesByNamespace', params_type) ->
  {struct, [{1, string}]}
;
function_info('getTableNamesByNamespace', reply_type) ->
  {list, {struct, {'hbase_types', 'TTableName'}}};
function_info('getTableNamesByNamespace', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% createTable(This, Desc, SplitKeys)
function_info('createTable', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableDescriptor'}}},
          {2, {list, string}}]}
;
function_info('createTable', reply_type) ->
  {struct, []};
function_info('createTable', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% deleteTable(This, TableName)
function_info('deleteTable', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}}]}
;
function_info('deleteTable', reply_type) ->
  {struct, []};
function_info('deleteTable', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% truncateTable(This, TableName, PreserveSplits)
function_info('truncateTable', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}},
          {2, bool}]}
;
function_info('truncateTable', reply_type) ->
  {struct, []};
function_info('truncateTable', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% enableTable(This, TableName)
function_info('enableTable', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}}]}
;
function_info('enableTable', reply_type) ->
  {struct, []};
function_info('enableTable', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% disableTable(This, TableName)
function_info('disableTable', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}}]}
;
function_info('disableTable', reply_type) ->
  {struct, []};
function_info('disableTable', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% isTableEnabled(This, TableName)
function_info('isTableEnabled', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}}]}
;
function_info('isTableEnabled', reply_type) ->
  bool;
function_info('isTableEnabled', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% isTableDisabled(This, TableName)
function_info('isTableDisabled', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}}]}
;
function_info('isTableDisabled', reply_type) ->
  bool;
function_info('isTableDisabled', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% isTableAvailable(This, TableName)
function_info('isTableAvailable', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}}]}
;
function_info('isTableAvailable', reply_type) ->
  bool;
function_info('isTableAvailable', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% isTableAvailableWithSplit(This, TableName, SplitKeys)
function_info('isTableAvailableWithSplit', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}},
          {2, {list, string}}]}
;
function_info('isTableAvailableWithSplit', reply_type) ->
  bool;
function_info('isTableAvailableWithSplit', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% addColumnFamily(This, TableName, Column)
function_info('addColumnFamily', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}},
          {2, {struct, {'hbase_types', 'TColumnFamilyDescriptor'}}}]}
;
function_info('addColumnFamily', reply_type) ->
  {struct, []};
function_info('addColumnFamily', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% deleteColumnFamily(This, TableName, Column)
function_info('deleteColumnFamily', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}},
          {2, string}]}
;
function_info('deleteColumnFamily', reply_type) ->
  {struct, []};
function_info('deleteColumnFamily', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% modifyColumnFamily(This, TableName, Column)
function_info('modifyColumnFamily', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableName'}}},
          {2, {struct, {'hbase_types', 'TColumnFamilyDescriptor'}}}]}
;
function_info('modifyColumnFamily', reply_type) ->
  {struct, []};
function_info('modifyColumnFamily', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% modifyTable(This, Desc)
function_info('modifyTable', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TTableDescriptor'}}}]}
;
function_info('modifyTable', reply_type) ->
  {struct, []};
function_info('modifyTable', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% createNamespace(This, NamespaceDesc)
function_info('createNamespace', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TNamespaceDescriptor'}}}]}
;
function_info('createNamespace', reply_type) ->
  {struct, []};
function_info('createNamespace', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% modifyNamespace(This, NamespaceDesc)
function_info('modifyNamespace', params_type) ->
  {struct, [{1, {struct, {'hbase_types', 'TNamespaceDescriptor'}}}]}
;
function_info('modifyNamespace', reply_type) ->
  {struct, []};
function_info('modifyNamespace', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% deleteNamespace(This, Name)
function_info('deleteNamespace', params_type) ->
  {struct, [{1, string}]}
;
function_info('deleteNamespace', reply_type) ->
  {struct, []};
function_info('deleteNamespace', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% getNamespaceDescriptor(This, Name)
function_info('getNamespaceDescriptor', params_type) ->
  {struct, [{1, string}]}
;
function_info('getNamespaceDescriptor', reply_type) ->
  {struct, {'hbase_types', 'TNamespaceDescriptor'}};
function_info('getNamespaceDescriptor', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
% listNamespaceDescriptors(This)
function_info('listNamespaceDescriptors', params_type) ->
  {struct, []}
;
function_info('listNamespaceDescriptors', reply_type) ->
  {list, {struct, {'hbase_types', 'TNamespaceDescriptor'}}};
function_info('listNamespaceDescriptors', exceptions) ->
  {struct, [{1, {struct, {'hbase_types', 'TIOError'}}}]}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

function_names() -> 
  ['exists', 'existsAll', 'get', 'getMultiple', 'put', 'checkAndPut', 'putMultiple', 'deleteSingle', 'deleteMultiple', 'checkAndDelete', 'increment', 'append', 'openScanner', 'getScannerRows', 'closeScanner', 'mutateRow', 'getScannerResults', 'getRegionLocation', 'getAllRegionLocations', 'checkAndMutate', 'getTableDescriptor', 'getTableDescriptors', 'tableExists', 'getTableDescriptorsByPattern', 'getTableDescriptorsByNamespace', 'getTableNamesByPattern', 'getTableNamesByNamespace', 'createTable', 'deleteTable', 'truncateTable', 'enableTable', 'disableTable', 'isTableEnabled', 'isTableDisabled', 'isTableAvailable', 'isTableAvailableWithSplit', 'addColumnFamily', 'deleteColumnFamily', 'modifyColumnFamily', 'modifyTable', 'createNamespace', 'modifyNamespace', 'deleteNamespace', 'getNamespaceDescriptor', 'listNamespaceDescriptors'].

